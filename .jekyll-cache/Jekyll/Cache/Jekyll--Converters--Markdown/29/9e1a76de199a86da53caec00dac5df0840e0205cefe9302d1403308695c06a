I"é<p>Local support for CodeBuild is extremely useful if you want save money and not use the AWS CodeBuild to build (for testing). Instead, run the builds locally when in development phase and trying to get things working. Once you get it building successfully, use the buildspec.yml in AWS CodeBuild project itself.</p>

<p>At first, I wasn‚Äôt aware of this and I used CodeBuild entirely in learning phase. When I saw my bill, it was shocking. Then my mentor,  Paul Kukiel, recommended me this. It was a life saver.</p>

<h2 id="setting-up-build-process">Setting up build process</h2>

<h3 id="step-1">Step 1</h3>

<p>Clone this repository in your workspace</p>

<p><code class="highlighter-rouge">git clone https://github.com/aws/aws-codebuild-docker-images.git</code></p>

<p><img src="/blog/assets/images/2020-05-14/step1.png" alt="" /></p>

<h3 id="step-2">Step 2</h3>

<p>Open the repository in your VS Code  and navigate to <code class="highlighter-rouge">/aws-codebuild-docker-images/ubuntu/standard/3.0</code></p>

<p><img src="/blog/assets/images/2020-05-14/step2.png" alt="" /></p>

<h3 id="step-3">Step 3</h3>

<p>Open Dockerfile present in <code class="highlighter-rouge">/aws-codebuild-docker-images/ubuntu/standard/3.0</code> to build a local CodeBuild standard 3.0 image</p>

<p><img src="/blog/assets/images/2020-05-14/step3.png" alt="" /></p>

<h3 id="step-4">Step 4</h3>

<p>Remove the last line in that file that says <code class="highlighter-rouge">ENTRYPOINT [‚Äúdockerd-entrypoint.sh‚Äù]</code></p>

<p><img src="/blog/assets/images/2020-05-14/step4.png" alt="" /></p>

<h3 id="step-5">Step 5</h3>

<p>Run the below commands in /aws-codebuild-docker-images/ubuntu/standard/3.0. This will build the docker image locally. Ensure your Docker is running.</p>

<p><code class="highlighter-rouge">docker build -t aws/codebuild/standard:3.0 .</code></p>

<p><img src="/blog/assets/images/2020-05-14/step5.png" alt="" /></p>

<h3 id="step-6">Step 6</h3>

<p>Now we need to setup the local CodeBuild agent</p>

<h4 id="step-61">Step 6.1</h4>

<p>Get the latest by running</p>

<p><code class="highlighter-rouge">docker pull amazon/aws-codebuild-local:latest --disable-content-trust=false</code></p>

<p><img src="/blog/assets/images/2020-05-14/step6.1.png" alt="" /></p>

<h4 id="step-62">Step 6.2</h4>

<p>Run the below commands to download the file codebuild_build.sh that contains all the magic that will be executed to build locally and give it execution permission.</p>

<p>If you don‚Äôt have ‚Äúwget‚Äù install, run ‚Äúbrew install wget‚Äù</p>

<p><code class="highlighter-rouge">brew install wget</code> (skip if you already have wget)</p>

<p><code class="highlighter-rouge">wget https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/local_builds/codebuild_build.sh</code></p>

<p><code class="highlighter-rouge">chmod +x codebuild_build.sh</code></p>

<p><img src="/blog/assets/images/2020-05-14/step6.2.png" alt="" /></p>

<h2 id="buiding-a-react-app-using-buildspecyml-and-upload-to-s3">Buiding A React App Using buildspec.yml and upload to S3</h2>

<p>Create React App (CRA) is a tool created by Facebook to create React applications in the single command in terminal. If you don‚Äôt have an exisiting project, create one with <code class="highlighter-rouge">create-react-app</code></p>

<p><code class="highlighter-rouge">buildspec.yml</code> file is where all the commands are written to be executed in order to get and build everything the project needs to run successfully</p>

<h3 id="step-1-1">Step 1:</h3>

<p>Navigate to your project‚Äôs folder and create a file buildspec.yml at the root. The file has to be named exactly that as CodeBuild looks for it to do the build</p>

<p><code class="highlighter-rouge">cd your-project-folder-name</code></p>

<p><code class="highlighter-rouge">touch buildspec.yml</code></p>

<h3 id="step-2-1">Step 2</h3>

<p>Paste the below code in your buildspec.yml file</p>

<p>Add a bucket name in SSM (AWS Systems Manager Parameter Store) as we will fetch the bucket name from there (assuming you know how to)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: 0.2

env:
  parameter-store:
    BUCKET: /codebuild/bucketName

phases:
  install:
    commands:
        - npm install
  build:
    commands:
        - npm run build
        - aws s3 sync build/ s3://$BUCKET
</code></pre></div></div>
<p><strong>Code Explanation</strong></p>

<p><code class="highlighter-rouge">version: 0.2</code> - Represents what version of buildspec is being used.</p>

<p><code class="highlighter-rouge">env</code> -  Represents information for custom environment variables</p>

<p><code class="highlighter-rouge">parameter-store</code> -  To retrieve custom environment variable from AWS System Manager Parameter Store (SSM). Store values as key: value pairs</p>

<p><code class="highlighter-rouge">BUCKET</code> - Denotes the use of S3 bucket</p>

<p><code class="highlighter-rouge">/codebuild/bucketName</code> - Naming convention to name parameters in SSM such as /{serviceName}/{parameterName}</p>

<p><code class="highlighter-rouge">phases</code> - CodeBuild has different phases however, we only use install and build. Each of these phases contain their respective commands to run.</p>

<p><code class="highlighter-rouge">install</code> - Sections runs commands to install all the necessary tools needed to build installed for the project</p>

<p><code class="highlighter-rouge">npm install</code> - Downloads a package an its dependencies</p>

<p><code class="highlighter-rouge">build</code> - Section that runs commands required to build the project</p>

<p><code class="highlighter-rouge">npm run build</code> -  Outputs the production ready version of the application in a separate folder buildwhich doesn‚Äôt contain source code.</p>

<p><code class="highlighter-rouge">aws s3 sync build/ s3://$BUCKET</code> - This uploads the contents of build folder to S3. You may have noticed ‚ÄúBUCKET‚Äù prefixed with a dollar $ sign. This is necessary for the runtime to know that it‚Äôs an environmental variable.</p>

<h3 id="step-3-1">Step 3</h3>

<p>Now, open up terminal and navigate to the clone git repository aws-codebuild-docker-images (see step 1 if unsure) and run below command:</p>

<p><code class="highlighter-rouge">./codebuild_build.sh -i aws/codebuild/standard:3.0 -a ~/Desktop -s ~/workspace/create-react-app -c ~/.aws</code></p>

<p>This is how it‚Äôs being used:</p>

<p><code class="highlighter-rouge">$ codebuild_build.sh [-i image_name] [-a artifact_output_directory] [options]</code></p>

<p><code class="highlighter-rouge">codebuild_build.sh</code> -  Executes a shell script</p>

<p><code class="highlighter-rouge">-i</code> - Specifies the build image (from step 5)</p>

<p><code class="highlighter-rouge">-a</code> - Specifies the output directory</p>

<p><code class="highlighter-rouge">-s</code> - Specifies directory where buildspec is located</p>

<p><code class="highlighter-rouge">-c</code> -  Specifies the folder that contains AWS configurations and credentials (usually in your home directory)</p>

<h3 id="step-4-1">Step 4</h3>

<p>Create S3 bucket and name it as appropriate</p>

<h3 id="step-5-1">Step 5</h3>

<p>If everything goes well, you should see you React application in S3</p>

<p><img src="/images/s3-before-upload.png" alt="" /></p>

<p>Hope it helped and you‚Äôre all up and running. If you faced any problems, let me know in the comments.</p>

<p><img src="/images/s3-after-upload.png" alt="" /></p>
:ET